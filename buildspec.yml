version: 0.2
env:
  secrets-manager:
    AWS_ACCOUNT_ID: "ACCOUNT_ID:AWS_ACCOUNT_ID"
    REGION: "REGION:REGION"
    REPOSITORY_URL: "REPOSITORY_URL:REPOSITORY_URL"
    EKS_ROLE_ARN: "EKS_ROLE_ARN:EKS_ROLE_ARN"
    EKS_CLUSTER_NAME: "EKS_CLUSTER_NAME:EKS_CLUSTER_NAME"
phases:
  pre_build:
    commands:
    # This Docker Image tag will have GitHub commit ID
    - TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 7)
    - HELM_CHART_NAME=webapp-$TAG
    # Login to ECR Registry 
    - echo "Login in to Amazon ECR Registry"
    - aws ecr get-login-password --region $REGION
    # Update Kube config Home Directory
    - export KUBECONFIG=$HOME/.kube/config
    # Install Helm
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
  build:
    commands:
    # Building the Docker Image
    - echo "Docker build started on `date`"
    - docker build --tag $REPOSITORY_URL:$TAG .
    - echo "Docker build completed on `date`"
  post_build:
    commands:
    # Push Docker Image to ECR Repository
    - echo "Pushing the Docker image to ECR Repository"
    - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com
    - docker push $REPOSITORY_URL:$TAG
    - echo "Docker Push to ECR Repository Completed - $REPOSITORY_URI:$TAG"
    # Get AWS Credential using STS Assume Role for kubectl
    - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
    - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_ROLE_ARN --role-session-name eks-codebuild --duration-seconds 900)
    - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
    - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
    - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
    - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
    # Updating kubectl configuration with the EKS Cluster              
    - echo "Update Kube Config configuration"
    - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
    # Deploy Helm Chart on Private EKS Cluster
    - echo "Deploy Helm Chart on EKS"
    - helm install $HELM_CHART_NAME application/ --set containers.image=$REPOSITORY_URL:$TAG
    - echo "Helm Chart Deployed Successfully"
